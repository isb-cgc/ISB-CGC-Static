version: 2.1
commands:
  deployment_setup:
    steps:
      - run:
          name: "Set the Tier"
          command: |
            TIER=DEV
            if [[ ${CIRCLE_BRANCH} =~ (prod|uat|test).* ]]; then
              TIER=$(awk -F[\-_] '{print toupper($1)}' \<<< ${CIRCLE_BRANCH})
            elif [[ ${CIRCLE_BRANCH} =~ expr.* ]]; then
              echo "Saw experimental tier branch."
              TIER=EXPR
            else
              echo "Saw dev tier branch."
            fi
            echo "export TIER=${TIER}" >> $BASH_ENV
            echo "Tier was identified as ${TIER} for branch ${CIRCLE_BRANCH}"
      - run:
          name: "Assign Project-level vars"
          command: |
            if [ ! -f deployment.key.json ]; then
              echo "Deployment JSON keyfile not found - loading from CircleCI."
              KEY=${DEPLOYMENT_KEY_ISB_CGC_DEV}
            else
              echo "Deployment JSON keyfile found."
              KEY="NA"
            fi
            CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_ISB_CGC_DEV}
            PROJECT_ID=${DEPLOYMENT_PROJECT_ID_ISB_CGC_DEV}
            BUCKET=${DEPLOYMENT_BUCKET_ISB_CGC_DEV}
            DEPLOYMENT_CONFIG=deployment_config.txt
            if [[ ${TIER} == "PROD" ]]; then
              CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_ISB_CGC}
              PROJECT_ID=${DEPLOYMENT_PROJECT_ID_ISB_CGC}
              BUCKET="${DEPLOYMENT_BUCKET_ISB_CGC}/${TIER,,}"
              KEY=${DEPLOYMENT_KEY_ISB_CGC}
            elif [[ ${TIER} == "UAT" ]]; then
              KEY=${DEPLOYMENT_KEY_ISB_CGC_UAT}
              CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_ISB_CGC_UAT}
              PROJECT_ID=${DEPLOYMENT_PROJECT_ID_ISB_CGC_UAT}
              BUCKET=${DEPLOYMENT_BUCKET_ISB_CGC_UAT}
            elif [[ ${TIER} == "TEST" ]]; then
              KEY=${DEPLOYMENT_KEY_ISB_CGC_TEST}
              CLIENT_EMAIL=${DEPLOYMENT_CLIENT_EMAIL_ISB_CGC_TEST}
              PROJECT_ID=${DEPLOYMENT_PROJECT_ID_ISB_CGC_TEST}
              BUCKET=${DEPLOYMENT_BUCKET_ISB_CGC_TEST}
            elif [[ ${TIER} == "EXPR" ]]; then
              DEPLOYMENT_CONFIG=expr.deployment_config.txt
              echo "Using experimental project and related deployment SA and bucket."
            elif [[ ${TIER} == "DEV" ]]; then
              echo "Using default deployment configuration for tier ${TIER}"
            else
              echo "[ERROR] - Unrecognized tier: ${TIER} - exitng."
              exit 1
            fi

            echo "export DEPLOYMENT_KEY=\"${KEY}\"" >> $BASH_ENV
            echo "export DEPLOYMENT_CLIENT_EMAIL=${CLIENT_EMAIL}" >> $BASH_ENV
            echo "export DEPLOYMENT_PROJECT_ID=${PROJECT_ID}" >> $BASH_ENV
            echo "export DEPLOYMENT_BUCKET=${BUCKET}" >> $BASH_ENV
            echo "export DEPLOYMENT_CONFIG=${DEPLOYMENT_CONFIG}" >> $BASH_ENV

            echo "Project settings assigned:"
            echo "Deployment client: ${CLIENT_EMAIL}"
            echo "Deployment project: ${PROJECT_ID}"
            echo "Deployment bucket: gs://${BUCKET}"

  deployment_config:
    steps:
      - run:
          name: "Set tier-specific configuration file"
          command: |
            sudo -E /bin/bash ./shell/pull_config.sh
            xargs -a deployment_config.txt -I{} echo "export {}" >> $BASH_ENV

  auth:
    steps:
      - run:
          name: "Service Account Auth and Project Settings"
          command: |
            sudo -E /bin/bash ./shell/gcloud_authenticate.sh

  install_cloud_sdk:
    steps:
      - run:
          name: "Install CloudSDK"
          command: |
            echo "export CLOUDSDK_CORE_DISABLE_PROMPTS=1" >> $BASH_ENV
            sudo apt-get update -qq
            sudo apt-get install ca-certificates python3-distutils apt-transport-https gnupg
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
            sudo apt-get update -qq
            sudo apt-get -y install google-cloud-sdk

jobs:
  deploy_job:
    environment:
      TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    working_directory: ~/ISB-CGC-Static
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - install_cloud_sdk
      - deployment_setup
      - auth
      - deployment_config
      - run:
          name: "Static Site and Redirect Deployment"
          command: |
            sudo -E /bin/bash ./shell/gcloud-pull-staging-files.sh
            sudo -E /bin/bash ./shell/rsync.sh
            sudo -E gcloud config set app/cloud_build_timeout 1600
            sudo -E gcloud app deploy --verbosity=debug ./app.yaml --quiet
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - deploy_job:
          filters:
            branches:
              only:
                - main
                - test
                - uat
                - prod
